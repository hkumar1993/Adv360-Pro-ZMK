#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "hml";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 52 65 66 67>;
        };

        td_paste: tdpaste {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap_Dance_Paste";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp LC(V)>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp N1           &kp N2           &kp N3         &kp N4        &kp N5               &tog 1                                                                  &mo 3      &kp N6                &kp N7                &kp N8             &kp N9            &kp N0                &kp MINUS
&kp TAB     &kp Q            &kp W            &kp E          &kp R         &kp T                &none                                                                   &none      &kp Y                 &kp U                 &kp I              &kp O             &kp P                 &kp BSLH
&kp TAB     &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LSHIFT D  &hml LCTRL F  &hml LS(LEFT_ALT) G  &none     &kp LCTRL                 &kp LALT      &kp LGUI   &kp RCTRL  &none      &hmr RS(RIGHT_ALT) H  &hmr RIGHT_CONTROL J  &hmr LEFT_SHIFT K  &hmr RIGHT_ALT L  &hmr RMETA SEMICOLON  &kp SQT
&kp LSHFT   &kp Z            &kp X            &kp C          &td_paste     &kp B                                                    &kp HOME      &kp PG_UP                        &kp N                 &kp M                 &kp COMMA          &kp DOT           &kp FSLH              &kp RSHFT
&mo 2       &kp GRAVE        &kp CAPS         &kp LEFT       &kp RIGHT                          &kp BSPC  &hml LEFT_CONTROL DELETE  &kp END       &kp PG_DN  &kp ENTER  &kp SPACE                        &kp UP                &kp DOWN           &kp LBKT          &kp RBKT              &mo 2
            >;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans           &trans  &trans  &trans  &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &kp KP_EQUAL     &kp N7  &kp N8  &kp N9  &kp KP_PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6  &kp KP_MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &kp KP_DIVIDE    &kp N1  &kp N2  &kp N3  &kp DOT       &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &kp N0                   &trans  &trans  &trans  &trans        &trans
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
